/**
 * @file CameraNode.cpp
 * @brief Camera node
 * @date Created: 2012-10-08
 * 
 * @author Arjan Groenewegen
 * @author Koen Braham
 * @author Daan Veltman
 * 
 * @section LICENSE 
 * Copyright Â© 2012, HU University of Applied Sciences Utrecht. 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * - Neither the name of the HU University of Applied Sciences Utrecht nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE HU UNIVERSITY OF APPLIED SCIENCES UTRECHT
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 **/

#include "CameraNode/CameraNode.h"
#include "CameraNode/Services.h"
#include "Utilities/Utilities.h"

CameraNode::CameraNode(int argc, char * argv[]) : it(nodeHandle), exposure(0.015) {
	// Check arguments
	if(argc != 4) {
		std::cerr
		        << "Not enough arguments, please specify the following arguments \"device number\", \"format number\", \"correction xml generated by the camera correction tool\""
		        << std::endl;
		exit(1);
	}

	int device_number, format_number;
	if(Utilities::str2int(device_number, argv[1]) != 0) {
		std::cerr << "Device number is not a valid number." << std::endl;
		exit(2);
	}

	if(Utilities::str2int(format_number, argv[2]) != 0) {
		std::cerr << "Format number is not a valid number." << std::endl;
		exit(3);
	}

	try {
		// Connect to camera. On failure a exception will be thrown.
		std::cout << "[DEBUG] Initializing camera" << std::endl;
		cam = new unicap_cv_bridge::unicap_cv_camera(device_number, format_number);
		cam->set_auto_white_balance(true);
		cam->set_exposure(0.015);
		camFrame = cv::Mat(cam->get_img_height(), cam->get_img_width(), cam->get_img_format());

		std::cout << "[DEBUG] Starting camera lens distortion corrector" << std::endl;
		rectifier = new Camera::RectifyImage();
		if(!rectifier->initRectify(argv[3], cv::Size(cam->get_img_width(), cam->get_img_height()))) {
			std::cerr << "XML correction file not found or unreadable?" << std::endl;
			exit(4);
		}

		std::cout << "[DEBUG] Opening /camera/image topic" << std::endl;
		pub = it.advertise("camera/image", 1);

	} catch(const unicap_cv_bridge::unicap_cv_exception & exception) {
		std::cerr << "unicap error: " << exception.what() << std::endl;
		exit(5);
	}
}

CameraNode::~CameraNode() {
	delete cam;
}

bool CameraNode::increaseExposure(std_srvs::Empty::Request &request, std_srvs::Empty::Response &response) {
	std::cout << "[DEBUG] Service increaseExposure ";
	exposure *= 1.125;
	std::cout << exposure << std::endl;

	if(cam) {
		cam->set_exposure(exposure);
	} else {
		return false;
	}

	return true;
}

bool CameraNode::decreaseExposure(std_srvs::Empty::Request &request, std_srvs::Empty::Response &response) {
	std::cout << "[DEBUG] Service decreaseExposure ";
	exposure /= 1.125;
	std::cout << exposure << std::endl;

	if(cam) {
		cam->set_exposure(exposure);
	} else {
		return false;
	}

	return true;
}

bool CameraNode::autoWhiteBalance(cameraNode::AutoWhiteBalance::Request& request, cameraNode::AutoWhiteBalance::Response& response) {
	std::cout << "[DEBUG] Service autoWhiteBalance " << (bool) request.enable << std::endl;
	if(cam) {
		cam->set_auto_white_balance(request.enable);
	} else {
		return false;
	}

	return true;
}

void CameraNode::run() {
	if(!cam) {
		std::cerr << "[ERROR] Camera not initialized!" << std::endl;
		exit(6);
	}

	ros::Rate frameRate(30);

	while(ros::ok()) {
		// Read image 
		cam->get_frame(&camFrame);
		rectifier->rectify(camFrame, rectifiedCamFrame);

		ros::Time time = ros::Time::now();
		cv_bridge::CvImage cvi;
		cvi.header.stamp = time;
		cvi.header.frame_id = "image";
		cvi.encoding = sensor_msgs::image_encodings::BGR8;
		cvi.image = rectifiedCamFrame;
		pub.publish(cvi.toImageMsg());

		frameRate.sleep();
		ros::spinOnce();
	}
}

/**
 *
 * Exit codes:
 *	0 normal
 *	1 not enough arguments
 *	2 invalid device number
 *	3 invalid format number
 *	4 XML file not found
 * 	5 Unicap error
 * 	6 Running main loop without a camera
 **/
int main(int argc, char* argv[]) {
	ros::init(argc, argv, "cameraNode");

	CameraNode cn(argc, argv);

	std::cout << "[DEBUG] Advertising services" << std::endl;
	ros::NodeHandle nodeHandle;

	// Advertise the services.
	ros::ServiceServer increaseExposureService = nodeHandle.advertiseService(CameraNodeServices::INCREASE_EXPOSURE,
	        &CameraNode::increaseExposure, &cn);
	ros::ServiceServer decreaseExposureService = nodeHandle.advertiseService(CameraNodeServices::DECREASE_EXPOSURE,
	        &CameraNode::decreaseExposure, &cn);
	ros::ServiceServer autoWhiteBalanceService = nodeHandle.advertiseService(CameraNodeServices::AUTO_WHITE_BALANCE,
	        &CameraNode::autoWhiteBalance, &cn);

	cn.run();

	return 0;
}
